{
  name = simple-init-module

  dependsOn = [
    oap
    oap-ws
  ]

  profiles = [
    http
  ]

  services {

      other-objects-factory {
        implementation = org.example.NotNull
      }
      not-null-objects-factory {
        implementation = org.example.NotNull
        parameters {
          internalField = 3
          constructorParameter1 = Text
          constructorParameter2 = modules.simple-init-module.other-objects-factory
        }
      }

      simple-rest-api-service {
        implementation = org.example.webservice.MainWS
        parameters {
          simple = modules.simple-init-module.other-objects-factory
          full = modules.simple-init-module.not-null-objects-factory
          producer = modules.this.substitute-param-example
        }
        ws-service {
          path = ws
        }
      }

      simple-thread-service {
        implementation = org.example.thread.SimpleThread
        supervision {
          supervise = true
          schedule = true
          delay = 5s
        }
      }

      substitute-param-example {
        implementation = org.example.linking.MessageProducer
        parameters {
          toBeResolved = null
        }
      }
      ace1 {
        implementation = org.example.linking.Ace
        enabled = false
        parameters {
          value = 1
        }
        link {
          toBeResolved = modules.this.substitute-param-example
        }
      }
      ace2 {
        implementation = org.example.linking.Ace
        parameters {
          value = 2
        }
        link {
          toBeResolved = modules.this.substitute-param-example
        }
      }

      kernel-holder {
        implementation = org.example.KernelHolder
        parameters {
          kernel = kernel.self
        }
      }

    ddos-attack-preventer {
      implementation = org.example.interceptors.DDosAttackInterceptor
      parameters {
        delay = 2
      }
    }

      kernel-demo-ws {
        implementation = org.example.webservice.KernelDemoWS
        parameters {
          kernelHolder = modules.this.kernel-holder
        }
        ws-service {
          path = kernel
          sessionAware = true
          interceptors = [
            modules.simple-init-module.ddos-attack-preventer
          ]
        }
      }



    }
}